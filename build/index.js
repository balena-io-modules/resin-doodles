(function() {
  var HOLIDAYS, charlie, compareArrays, dateIsBetween;

  charlie = require('./charlie');

  HOLIDAYS = [
    {
      start: [10, 30],
      end: [11, 1],
      doodle: require('./pumpkin')
    }, {
      start: [12, 20],
      end: [1, 5],
      doodle: require('./charlie-christmas')
    }
  ];

  compareArrays = function(a1, a2) {
    var i, j, ref;
    for (i = j = 0, ref = a1.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (a1[i] < a2[i]) {
        return -1;
      } else if (a1[i] > a2[i]) {
        return 1;
      }
    }
    return 0;
  };

  dateIsBetween = function(date, start, end) {
    var endDate, nextYear, startDate, thisYear, year;
    year = date.getFullYear();
    startDate = new Date(year, start[0] - 1, start[1]);
    endDate = new Date(year, end[0] - 1, end[1]);
    if (compareArrays(start, end) <= 0) {
      return (startDate < date && date < endDate);
    } else {
      thisYear = new Date(year, 0, 1);
      nextYear = new Date(year + 1, 0, 1);
      return ((startDate < date && date < nextYear)) || ((thisYear < date && date < endDate));
    }
  };

  exports.getDoodle = function(date) {
    var h, j, len;
    if (date == null) {
      date = new Date();
    }
    for (j = 0, len = HOLIDAYS.length; j < len; j++) {
      h = HOLIDAYS[j];
      if (dateIsBetween(date, h.start, h.end)) {
        return h.doodle;
      }
    }
    return charlie;
  };

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsT0FBQSxHQUFVLE9BQUEsQ0FBUSxXQUFSOztFQUVWLFFBQUEsR0FBVztJQUNWO01BQ0MsS0FBQSxFQUFPLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FEUjtNQUVDLEdBQUEsRUFBSyxDQUFDLEVBQUQsRUFBSyxDQUFMLENBRk47TUFHQyxNQUFBLEVBQVEsT0FBQSxDQUFRLFdBQVIsQ0FIVDtLQURVLEVBTVY7TUFDQyxLQUFBLEVBQU8sQ0FBQyxFQUFELEVBQUssRUFBTCxDQURSO01BRUMsR0FBQSxFQUFLLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FGTjtNQUdDLE1BQUEsRUFBUSxPQUFBLENBQVEscUJBQVIsQ0FIVDtLQU5VOzs7RUFhWCxhQUFBLEdBQWdCLFNBQUMsRUFBRCxFQUFLLEVBQUw7QUFDZixRQUFBO0FBQUEsU0FBUyxrRkFBVDtNQUNDLElBQUcsRUFBRyxDQUFBLENBQUEsQ0FBSCxHQUFRLEVBQUcsQ0FBQSxDQUFBLENBQWQ7QUFDQyxlQUFPLENBQUMsRUFEVDtPQUFBLE1BRUssSUFBRyxFQUFHLENBQUEsQ0FBQSxDQUFILEdBQVEsRUFBRyxDQUFBLENBQUEsQ0FBZDtBQUNKLGVBQU8sRUFESDs7QUFITjtBQUtBLFdBQU87RUFOUTs7RUFRaEIsYUFBQSxHQUFnQixTQUFDLElBQUQsRUFBTyxLQUFQLEVBQWMsR0FBZDtBQUNmLFFBQUE7SUFBQSxJQUFBLEdBQU8sSUFBSSxDQUFDLFdBQUwsQ0FBQTtJQUNQLFNBQUEsR0FBWSxJQUFJLElBQUosQ0FBUyxJQUFULEVBQWUsS0FBTSxDQUFBLENBQUEsQ0FBTixHQUFXLENBQTFCLEVBQTZCLEtBQU0sQ0FBQSxDQUFBLENBQW5DO0lBQ1osT0FBQSxHQUFVLElBQUksSUFBSixDQUFTLElBQVQsRUFBZSxHQUFJLENBQUEsQ0FBQSxDQUFKLEdBQVMsQ0FBeEIsRUFBMkIsR0FBSSxDQUFBLENBQUEsQ0FBL0I7SUFDVixJQUFHLGFBQUEsQ0FBYyxLQUFkLEVBQXFCLEdBQXJCLENBQUEsSUFBNkIsQ0FBaEM7QUFDQyxhQUFPLENBQUEsU0FBQSxHQUFZLElBQVosSUFBWSxJQUFaLEdBQW1CLE9BQW5CLEVBRFI7S0FBQSxNQUFBO01BR0MsUUFBQSxHQUFXLElBQUksSUFBSixDQUFTLElBQVQsRUFBZSxDQUFmLEVBQWtCLENBQWxCO01BQ1gsUUFBQSxHQUFXLElBQUksSUFBSixDQUFTLElBQUEsR0FBTyxDQUFoQixFQUFtQixDQUFuQixFQUFzQixDQUF0QjtBQUNYLGFBQU8sQ0FBQyxDQUFBLFNBQUEsR0FBWSxJQUFaLElBQVksSUFBWixHQUFtQixRQUFuQixDQUFELENBQUEsSUFBaUMsQ0FBQyxDQUFBLFFBQUEsR0FBVyxJQUFYLElBQVcsSUFBWCxHQUFrQixPQUFsQixDQUFELEVBTHpDOztFQUplOztFQVdoQixPQUFPLENBQUMsU0FBUixHQUFvQixTQUFDLElBQUQ7QUFDbkIsUUFBQTs7TUFBQSxPQUFRLElBQUksSUFBSixDQUFBOztBQUNSLFNBQUEsMENBQUE7O01BQ0MsSUFBRyxhQUFBLENBQWMsSUFBZCxFQUFvQixDQUFDLENBQUMsS0FBdEIsRUFBNkIsQ0FBQyxDQUFDLEdBQS9CLENBQUg7QUFDQyxlQUFPLENBQUMsQ0FBQyxPQURWOztBQUREO0FBR0EsV0FBTztFQUxZO0FBbENwQiIsInNvdXJjZXNDb250ZW50IjpbImNoYXJsaWUgPSByZXF1aXJlICcuL2NoYXJsaWUnXG5cbkhPTElEQVlTID0gW1xuXHR7XG5cdFx0c3RhcnQ6IFsxMCwgMzBdICAjIFttb250aCwgZGF5XVxuXHRcdGVuZDogWzExLCAxXVxuXHRcdGRvb2RsZTogcmVxdWlyZSgnLi9wdW1wa2luJylcblx0fVxuXHR7XG5cdFx0c3RhcnQ6IFsxMiwgMjBdXG5cdFx0ZW5kOiBbMSwgNV1cblx0XHRkb29kbGU6IHJlcXVpcmUoJy4vY2hhcmxpZS1jaHJpc3RtYXMnKVxuXHR9XG5dXG5cbmNvbXBhcmVBcnJheXMgPSAoYTEsIGEyKSAtPlxuXHRmb3IgaSBpbiBbMC4uLmExLmxlbmd0aF1cblx0XHRpZiBhMVtpXSA8IGEyW2ldXG5cdFx0XHRyZXR1cm4gLTFcblx0XHRlbHNlIGlmIGExW2ldID4gYTJbaV1cblx0XHRcdHJldHVybiAxXG5cdHJldHVybiAwXG5cbmRhdGVJc0JldHdlZW4gPSAoZGF0ZSwgc3RhcnQsIGVuZCkgLT5cblx0eWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKVxuXHRzdGFydERhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBzdGFydFswXSAtIDEsIHN0YXJ0WzFdKVxuXHRlbmREYXRlID0gbmV3IERhdGUoeWVhciwgZW5kWzBdIC0gMSwgZW5kWzFdKVxuXHRpZiBjb21wYXJlQXJyYXlzKHN0YXJ0LCBlbmQpIDw9IDBcblx0XHRyZXR1cm4gc3RhcnREYXRlIDwgZGF0ZSA8IGVuZERhdGVcblx0ZWxzZVxuXHRcdHRoaXNZZWFyID0gbmV3IERhdGUoeWVhciwgMCwgMSlcblx0XHRuZXh0WWVhciA9IG5ldyBEYXRlKHllYXIgKyAxLCAwLCAxKVxuXHRcdHJldHVybiAoc3RhcnREYXRlIDwgZGF0ZSA8IG5leHRZZWFyKSBvciAodGhpc1llYXIgPCBkYXRlIDwgZW5kRGF0ZSlcblxuZXhwb3J0cy5nZXREb29kbGUgPSAoZGF0ZSkgLT5cblx0ZGF0ZSA/PSBuZXcgRGF0ZSgpXG5cdGZvciBoIGluIEhPTElEQVlTXG5cdFx0aWYgZGF0ZUlzQmV0d2VlbihkYXRlLCBoLnN0YXJ0LCBoLmVuZClcblx0XHRcdHJldHVybiBoLmRvb2RsZVxuXHRyZXR1cm4gY2hhcmxpZVxuIl19
